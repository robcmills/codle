import { type Language } from "codle/types/Language";

export const CODLES = {
  C: [
    "auto",
    "break",
    "case",
    "char",
    "const",
    "continue",
    "default",
    "do",
    "double",
    "else",
    "enum",
    "extern",
    "float",
    "for",
    "goto",
    "if",
    "int",
    "long",
    "register",
    "return",
    "short",
    "signed",
    "sizeof",
    "static",
    "struct",
    "switch",
    "typedef",
    "union",
    "unsigned",
    "void",
    "volatile",
    "while",
  ],
  "C++": [
    "asm",
    "double",
    "new",
    "switch",
    "auto",
    "else",
    "operator",
    "template",
    "break",
    "enum",
    "private",
    "this",
    "case",
    "extern",
    "protected",
    "throw",
    "catch",
    "float",
    "public",
    "try",
    "char",
    "for",
    "register",
    "typedef",
    "class",
    "friend",
    "return",
    "union",
    "const",
    "goto",
    "short",
    "unsigned",
    "continue",
    "if",
    "signed",
    "virtual",
    "default",
    "inline",
    "sizeof",
    "void",
    "delete",
    "int",
    "static",
    "volatile",
    "do",
    "long",
    "struct",
    "while",
  ],
  "C#": [
    "abstract",
    "add",
    "alias",
    "as",
    "ascending",
    "async",
    "await",
    "base",
    "bool",
    "break",
    "byte",
    "case",
    "catch",
    "char",
    "checked",
    "class",
    "const",
    "continue",
    "decimal",
    "default",
    "delegate",
    "descending",
    "do",
    "double",
    "dynamic",
    "else",
    "enum",
    "event",
    "explicit",
    "extern",
    "false",
    "finally",
    "fixed",
    "float",
    "for",
    "foreach",
    "from",
    "get",
    "global",
    "goto",
    "group",
    "if",
    "implicit",
    "in",
    "in",
    "int",
    "interface",
    "internal",
    "into",
    "is",
    "join",
    "let",
    "lock",
    "long",
    "namespace",
    "new",
    "null",
    "object",
    "operator",
    "orderby",
    "out",
    "out",
    "override",
    "params",
    "partial",
    "private",
    "protected",
    "public",
    "readonly",
    "ref",
    "remove",
    "return",
    "sbyte",
    "sealed",
    "select",
    "set",
    "short",
    "sizeof",
    "stackalloc",
    "static",
    "static",
    "string",
    "struct",
    "switch",
    "this",
    "throw",
    "true",
    "try",
    "typeof",
    "uint",
    "ulong",
    "unchecked",
    "unsafe",
    "ushort",
    "using",
    "using",
    "value",
    "var",
    "void",
    "volatile",
    "when",
    "where",
    "while",
    "yield",
  ],
  Go: [
    "break",
    "case",
    "chan",
    "const",
    "continue",
    "default",
    "defer",
    "else",
    "fallthrough",
    "for",
    "func",
    "go",
    "goto",
    "if",
    "import",
    "interface",
    "map",
    "package",
    "range",
    "return",
    "select",
    "struct",
    "switch",
    "type",
    "var",
  ],
  HTML: [
    "a",
    "abbr",
    "acronym",
    "address",
    "applet",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "basefont",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "center",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "dir",
    "div",
    "dl",
    "doctype",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "font",
    "footer",
    "form",
    "frame",
    "frameset",
    "h1",
    "head",
    "header",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "meta",
    "meter",
    "nav",
    "noframes",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rom",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strike",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "svg",
    "table",
    "tbody",
    "td",
    "template",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "tt",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
  ],
  Java: [
    "abstract",
    "assert",
    "boolean",
    "break",
    "byte",
    "case",
    "catch",
    "char",
    "class",
    "continue",
    "const",
    "default",
    "do",
    "double",
    "else",
    "enum",
    "exports",
    "extends",
    "final",
    "finally",
    "float",
    "for",
    "goto",
    "if",
    "implements",
    "import",
    "instanceof",
    "int",
    "interface",
    "long",
    "module",
    "native",
    "new",
    "package",
    "private",
    "protected",
    "public",
    "requires",
    "return",
    "short",
    "static",
    "strictfp",
    "super",
    "switch",
    "synchronized",
    "this",
    "throw",
    "throws",
    "transient",
    "try",
    "var",
    "void",
    "volatile",
    "while",
  ],
  JavaScript: [
    "arguments",
    "async",
    "await",
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "debugger",
    "default",
    "delete",
    "do",
    "else",
    "eval",
    "export",
    "extends",
    "false",
    "finally",
    "for",
    "from",
    "function",
    "if",
    "import",
    "in",
    "instanceof",
    "let",
    "new",
    "null",
    "of",
    "return",
    "set",
    "static",
    "strict",
    "super",
    "switch",
    "this",
    "throw",
    "true",
    "try",
    "typeof",
    "var",
    "void",
    "while",
    "with",
    "yield",
  ],
  Kotlin: [
    "abstract",
    "actual",
    "annotation",
    "as",
    "break",
    "by",
    "catch",
    "class",
    "companion",
    "const",
    "constructor",
    "continue",
    "crossinline",
    "data",
    "delegate",
    "do",
    "dynamic",
    "else",
    "enum",
    "expect",
    "external",
    "false",
    "field",
    "file",
    "final",
    "finally",
    "for",
    "fun",
    "get",
    "if",
    "import",
    "in",
    "infix",
    "init",
    "inline",
    "inner",
    "interface",
    "internal",
    "is",
    "it",
    "lateinit",
    "noinline",
    "null",
    "object",
    "open",
    "operator",
    "out",
    "override",
    "package",
    "param",
    "private",
    "property",
    "protected",
    "public",
    "receiver",
    "reified",
    "return",
    "sealed",
    "set",
    "super",
    "suspend",
    "tailrec",
    "this",
    "throw",
    "true",
    "try",
    "typealias",
    "typeof",
    "val",
    "var",
    "vararg",
    "when",
    "while",
  ],
  PHP: [
    "abstract",
    "array",
    "as",
    "bool",
    "break",
    "callable",
    "case",
    "catch",
    "class",
    "clone",
    "const",
    "continue",
    "declare",
    "default",
    "die",
    "do",
    "echo",
    "else",
    "elseif",
    "empty",
    "enddeclare",
    "endfor",
    "endforeach",
    "endif",
    "endswitch",
    "endwhile",
    "enum",
    "eval",
    "exit",
    "extends",
    "false",
    "final",
    "finally",
    "float",
    "fn",
    "for",
    "foreach",
    "from",
    "function",
    "global",
    "goto",
    "if",
    "implements",
    "include",
    "instanceof",
    "insteadof",
    "int",
    "interface",
    "isset",
    "iterable",
    "list",
    "match",
    "mixed",
    "namespace",
    "never",
    "new",
    "null",
    "numeric",
    "object",
    "or",
    "print",
    "private",
    "protected",
    "public",
    "readonly",
    "require",
    "resource",
    "return",
    "static",
    "string",
    "switch",
    "throw",
    "trait",
    "true",
    "try",
    "unset",
    "use",
    "var",
    "void",
    "while",
    "xor",
    "yield",
  ],
  Python: [
    "false",
    "def",
    "if",
    "raise",
    "none",
    "del",
    "import",
    "return",
    "true",
    "elif",
    "in",
    "try",
    "and",
    "else",
    "is",
    "while",
    "as",
    "except",
    "lambda",
    "with",
    "assert",
    "finally",
    "nonlocal",
    "yield",
    "break",
    "for",
    "not",
    "class",
    "from",
    "or",
    "continue",
    "global",
    "pass",
  ],
  Rust: [
    "self",
    "abstract",
    "as",
    "async",
    "await",
    "become",
    "box",
    "break",
    "const",
    "continue",
    "crate",
    "do",
    "dyn",
    "else",
    "enum",
    "extern",
    "false",
    "final",
    "fn",
    "for",
    "if",
    "impl",
    "in",
    "let",
    "loop",
    "macro",
    "match",
    "mod",
    "move",
    "mut",
    "override",
    "priv",
    "pub",
    "ref",
    "return",
    "self",
    "static",
    "struct",
    "super",
    "trait",
    "true",
    "try",
    "type",
    "typeof",
    "unsafe",
    "unsized",
    "use",
    "virtual",
    "where",
    "while",
    "yield",
  ],
  SQL: [
    "abort",
    "all",
    "allocate",
    "analyse",
    "analyze",
    "and",
    "any",
    "as",
    "asc",
    "between",
    "binary",
    "bit",
    "both",
    "case",
    "cast",
    "char",
    "character",
    "check",
    "cluster",
    "coalesce",
    "collate",
    "collation",
    "column",
    "constraint",
    "copy",
    "cross",
    "current",
    "deallocate",
    "dec",
    "decimal",
    "decode",
    "default",
    "desc",
    "distinct",
    "distribute",
    "do",
    "else",
    "end",
    "except",
    "exclude",
    "exists",
    "explain",
    "express",
    "extend",
    "external",
    "extract",
    "false",
    "first",
    "float",
    "following",
    "for",
    "foreign",
    "from",
    "full",
    "function",
    "genstats",
    "global",
    "group",
    "having",
    "ilike",
    "in",
    "index",
    "initially",
    "inner",
    "inout",
    "intersect",
    "interval",
    "into",
    "leading",
    "left",
    "like",
    "limit",
    "load",
    "local",
    "lock",
    "minus",
    "move",
    "natural",
    "nchar",
    "new",
    "not",
    "notnull",
    "null",
    "nulls",
    "numeric",
    "nvl",
    "nvl2",
    "off",
    "offset",
    "old",
    "on",
    "online",
    "only",
    "or",
    "order",
    "others",
    "out",
    "outer",
    "over",
    "overlaps",
    "partition",
    "position",
    "preceding",
    "precision",
    "preserve",
    "primary",
    "reset",
    "reset",
    "reuse",
    "reuse",
    "right",
    "rows",
    "select",
    "setof",
    "show",
    "some",
    "table",
    "then",
    "ties",
    "time",
    "timestamp",
    "to",
    "trailing",
    "transaction",
    "trigger",
    "trim",
    "true",
    "unbounded",
    "union",
    "unique",
    "user",
    "using",
    "vacuum",
    "varchar",
    "verbose",
    "version",
    "view",
    "when",
    "where",
    "with",
    "write",
  ],
  Swift: [
    "self",
    "any",
    "as",
    "associatedtype",
    "associativity",
    "available",
    "break",
    "case",
    "catch",
    "catch",
    "class",
    "colorliteral",
    "column",
    "continue",
    "convenience",
    "default",
    "defer",
    "deinit",
    "didset",
    "do",
    "dsohandle",
    "dynamic",
    "else",
    "else",
    "elseif",
    "endif",
    "enum",
    "error",
    "extension",
    "fallthrough",
    "false",
    "file",
    "fileid",
    "fileliteral",
    "filepath",
    "fileprivate",
    "final",
    "for",
    "func",
    "function",
    "get",
    "guard",
    "if",
    "if",
    "imageliteral",
    "import",
    "in",
    "indirect",
    "infix",
    "init",
    "inout",
    "internal",
    "is",
    "keypath",
    "lazy",
    "left",
    "let",
    "line",
    "mutating",
    "nil",
    "none",
    "nonmutating",
    "open",
    "operator",
    "optional",
    "override",
    "postfix",
    "precedence",
    "precedencegroup",
    "prefix",
    "private",
    "protocol",
    "protocol",
    "public",
    "repeat",
    "required",
    "rethrows",
    "rethrows",
    "return",
    "right",
    "selector",
    "self",
    "set",
    "some",
    "sourcelocation",
    "static",
    "struct",
    "subscript",
    "super",
    "switch",
    "throw",
    "throw",
    "throws",
    "true",
    "try",
    "type",
    "typealias",
    "unowned",
    "var",
    "warning",
    "weak",
    "where",
    "while",
    "willset",
  ],
  TypeScript: [
    "abstract",
    "any",
    "as",
    "asserts",
    "bigint",
    "boolean",
    "constructor",
    "declare",
    "enum",
    "from",
    "get",
    "global",
    "implements",
    "infer",
    "interface",
    "is",
    "let",
    "module",
    "namespace",
    "never",
    "number",
    "of",
    "package",
    "private",
    "protected",
    "public",
    "readonly",
    "require",
    "set",
    "static",
    "string",
    "symbol",
    "type",
    "typeof",
    "void",
    "yield",
  ],
} as const;

export function getRandomCodle({
  language,
  exclude = [],
}: {
  language: Language;
  exclude: string[];
}) {
  let keywords = CODLES[language] as unknown as string[];
  keywords = keywords.filter((keyword) => !exclude.includes(keyword));
  if (keywords.length === 0) return null;
  const randomIndex = Math.floor(Math.random() * keywords.length);
  return keywords[randomIndex] as string;
}
